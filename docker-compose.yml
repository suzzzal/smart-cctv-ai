
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cctv-postgres
    environment:
      POSTGRES_DB: cctv_monitor
      POSTGRES_USER: cctv_user
      POSTGRES_PASSWORD: cctv_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cctv_user -d cctv_monitor"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: cctv-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: cctv-backend
    environment:
      - DATABASE_URL=postgresql://cctv_user:cctv_password@postgres:5432/cctv_monitor
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=your-email@gmail.com
      - SMTP_PASSWORD=your-app-password
      - FROM_EMAIL=cctv-monitor@yourdomain.com
    volumes:
      - ./snapshots:/app/snapshots
      - ./logs:/app/logs
      - ./ai-models:/app/ai-models
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: cctv-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: cctv-celery-worker
    command: celery -A main.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://cctv_user:cctv_password@postgres:5432/cctv_monitor
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./snapshots:/app/snapshots
      - ./logs:/app/logs
      - ./ai-models:/app/ai-models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: cctv-celery-beat
    command: celery -A main.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://cctv_user:cctv_password@postgres:5432/cctv_monitor
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: cctv-network
